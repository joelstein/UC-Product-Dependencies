<?php

/**
 * Implementation of hook_menu().
 */
function uc_product_dependencies_menu() {
  $items['admin/store/settings/products/edit/product-dependencies'] = array(
    'title' => 'Product dependencies',
    'description' => t('Configure the product dependencies settings.'),
    'access arguments' => array('administer product dependencies'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_product_dependencies_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'uc_product_dependencies.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_product_dependencies_perm() {
  return array('administer product dependencies');
}

/**
 * Implementation of hook_form_alter().
 */
function uc_product_dependencies_form_alter(&$form, $form_state, $form_id) {
  
  // Checkout form
  if ($form_id == 'uc_cart_checkout_form') {
    
    global $user;
    $behavior_type = variable_get('uc_product_dependencies_behavior_type', 1);
    $order_status = variable_get('uc_product_dependencies_status_field', 'payment_received');
    $order_status_weight = db_result(db_query("SELECT weight FROM {uc_order_statuses} WHERE order_status_id = '%s'", $order_status));
    
    // Get cart items
    $items = uc_cart_get_contents();
    
    // Build array of cart node IDs
    $cart_nids = array();
    foreach ($items as $item) {
      $cart_nids[] = $item->nid;
      // For product kits, grab the node IDs for the products in the kit
      if ($item->module == 'uc_product_kit') {
        $kit = node_load($item->data['kit_id']);
        foreach ($kit->products as $product) {
          $cart_nids[] = $product->nid;
        }
      }
    }
    $cart_nids = array_unique($cart_nids);
    
    // Loop through the cart items and check for dependencies
    foreach ($items as $item) {
      
      $dependency_problem = true;
      $node = node_load($item->nid);
      
      // If this product has any dependencies...
      if ($dependency_nids = _uc_product_dependencies_get_dependencies($node)) {
        
        // Loop through the dependencies
        foreach ($dependency_nids as $key => $dependency_nid) {
          
          // Check if dependent product is in cart
          if (in_array($behavior_type, array(0, 1)) and in_array($dependency_nid, $cart_nids)) {
            $dependency_problem = false;
            unset($dependency_nids[$key]);
          }
          
          // Check if dependent product was previously ordered, and the order has the proper status
          if (in_array($behavior_type, array(1, 2)) and $user->uid) {
            $previously_ordered = db_result(db_query("SELECT COUNT(*) FROM {uc_orders} o LEFT JOIN {uc_order_products} p ON (o.order_id = p.order_id) LEFT JOIN {uc_order_statuses} s ON (o.order_status = s.order_status_id) WHERE o.uid = %d AND p.nid = %d AND s.weight >= %d", $user->uid, $dependency_nid, $order_status_weight));
            if ($previously_ordered) {
              $dependency_problem = false;
              unset($dependency_nids[$key]);
            }
          }
        }
        
        // If there is a dependency problem for this item...
        if ($dependency_problem) {
          
          // Build list of links to dependent products (but only if they have access to it)
          $links = array();
          foreach ($dependency_nids as $dependency_nid) {
            $dependency_node = node_load($dependency_nid);
            if (node_access('view', $dependency_node)) {
              $links[] = '<strong>'.l($dependency_node->title, "node/$dependency_nid").'</strong>';
            }
          }
          $title = check_plain($node->title);
          
          // Determine which error message to show user
          if (empty($links)) {
            $message = t("The product <strong>!title</strong> has a dependency to which you do not have access. Please contact the site administrator to purchase this product.", array('!title' => $title));
            $error = t("<strong>@user</strong> tried to purchase a <strong>!title</strong>, but failed because he/she lacks access to any of its dependent products.", array('@user' => $user->name, '!title' => $title));
            watchdog('store', $error, null, WATCHDOG_WARNING, l('edit', "node/$node->nid/edit"));
          }
          else {
            switch ($behavior_type) {
              case 0:
              case 1:
                if (count($links) > 1) {
                  $message = t("To purchase a <strong>!title</strong>, you must add one of the following to your cart: <ul><li>!dependencies</li></ul>", array('!title' => $title, '!dependencies' => join('</li><li>', $links)));
                } else {
                  $message = t("To purchase a <strong>!title</strong>, you must add a !dependency to your cart.", array('!title' => $title, '!dependency' => $links[0]));
                }
                break;
              case 2:
                if (count($links) > 1) {
                  $message = t("You may not purchase a <strong>!title</strong> until you purchase one of the following: <ul><li>!dependencies</li></ul> Please remove the <strong>!title</strong> from your cart.", array('!title' => $title, '!dependencies' => join('</li><li>', $links)));
                } else {
                  $message = t("You may not purchase a <strong>!title</strong> until you purchase a !dependency. Please remove the <strong>!title</strong> from your cart.", array('!title' => $title, '!dependency' => $links[0]));
                }
                break;
            }
          }
          
          // Show error message and redirect to cart
          drupal_set_message($message, 'error');
          drupal_goto('cart');
        }
      }
    }
  }
}

/**
 * Returns array of product dependencies for specified $node, or false if none.
 */
function _uc_product_dependencies_get_dependencies($node) {
  $cck_field = variable_get('uc_product_dependencies_cck_field', '');
  if (empty($cck_field) or empty($node->$cck_field)) {
    return false;
  }
  $dependency_nids = array();
  foreach ($node->$cck_field as $value) {
    if ($value['nid']) {
      $dependency_nids[] = $value['nid'];
    }
  }
  return empty($dependency_nids) ? false : $dependency_nids;
}
